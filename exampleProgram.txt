; Example Z80 assembler program to perform Euclid's algorithm
; This isn't written for any actual assembler; it's just my
; notes for me to hand assemble.

; Pseudocode from Wikipedia:
; function gcd(a, c)
;    while a != c
;        if a > c
;           a := a − c
;        else
;           c := c − a
;    return a

; Thus:
0000 LD C, N ; Read c from #0x01
0002 LD A, N ; Read a from #0x03

loop:
0004 CP C ; Compare to A (A-C); Carry set if C>A.
0005 JP Z done
0007 JP C c_gt_a

a_gt_c:
0009 SUB C
000A JP loop

c_gt_a:
; Now emulate RSB C:
; Hopefully this can be optimized!
000B LD B, A
000C LD A, C
000D SUB B
000E LD C, A
000F LD A, B
0010 JP loop

done: 
0012 LD [00FF] A
0015 JP done


; Second version, hand assembled:

0000 00111110 LD A, #N
0001 00110110 #52
0002 00000110 LD B, #N
0003 01001110 #78

0004 10111000 CP B
0005 00101000 JP C +N
0006 00000110 #6
0007 00111000 JP Z +N
 
0008 00000101 #5
0009 10010000 SUB B
0010 00011000 JP N+2
0011 11111000 #-8

0012 01001111 MOV C, A
0013 01111000 LD A, B
0014 10010000 SUB A
0015 11000111 RST O?

0016 11111001 ?
0017 00011000 JP N+2
0018 11110001 
0019 00110010 LD (NN), A

0020 10000000 0x80
0021 00000000 0x00
0022 00011000 JP N+2
0023 11111101 -3
